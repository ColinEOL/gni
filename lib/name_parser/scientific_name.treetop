grammar ScientificName
  
  rule scientific_name
    space a:name_part space b:authors_year space {
      def value
        a.value + " " + b.value
      end
      
      def canonical
        a.canonical
      end
      
      def details
        a.details.merge(b.details)
      end
    }
    /
    space a:name_part space b:authors space {
      def value
        a.value + " " + b.value
      end
      
      def canonical
        a.canonical
      end
      
      def details
        a.details.merge(b.details)
      end
    }
    / 
    name_part
  end
  
  rule authors_year
    space a:authors space b:year space c:authors_year space {
      def value
        a.value + " " + b.value + c.value
      end
      def details
        {:authors => "not implemented"}
      end
    }
    /
    space a:authors space b:year space {
      def value 
        a.value + " " + b.value.to_s
      end
      def details
        {:authors => a.value, :year => b.value.to_s}
      end
    }
  end
  
  rule year
    [0-9]+ {
      def value
        text_value.to_i
      end
    }
  end
  
  rule authors
    a:prev_author space b:authors {
      def value
        a.value + " " + b.value
      end
      def details
        {:authors => value}
      end
    }
    /
    a:author space b:authors {
      def value
        a.value + " " + b.value
      end
      def details
        {:authors => value}
      end
    }
    /
    prev_author
    /
    author
  end
  
  rule prev_author
    '(' a:author ')' {
      def value
        '(' + a.value + ')'
      end
      def details
        {:prev_author => value}
      end
    }
  end
  
  rule author
    space (/"Å"/"Ö"/"Á"/"Ø"/"Š"/"Č"/[A-Z]/"de"/"van"/"anon") [^0-9()]+ {
      def value
        text_value.strip.gsub(/\s+/," ")
      end
      def details
        {:author => value}
      end
    }
  end
  
  rule name_part
    space a:species_name space b:subspecies_names {
      def value
        a.value + b.value
      end
      def canonical
        a.canonical + b.canonical
      end
      
      def details
        a.details.merge(b.details)
      end
    }
    /
    space a:species_name space b:latin_word {
      def value
        a.value + " " + b.value
      end
      
      def canonical
        value
      end
      
      def details
        a.details.merge({:subspecies => {:type => "n/a", :value =>b.value}})
      end
    }
    /
    species_name
    / 
    cap_latin_word
  end
  
  rule subspecies_names
    a:subspecies_name space b:subspecies_names {
      def value
        a.value + b.value
      end
      
      def canonical
        a.canonical + b.canonical
      end
      
      def details
        c = a.details[:subspecies] + b.details_subspecies
        a.details.merge({:subspecies => c})
      end
    }
    /
    subspecies_name
  end
  
  rule subspecies_name
    sel:selector space a:latin_word {
      def value 
        sel.apply(a)
      end
      def canonical
        sel.canonical(a)
      end
      def details
        sel.details(a)
      end
      def details_subspecies
        details[:subspecies]
      end
    }        
  end
  
  rule selector
    ("f.sp." / "f." / "ssp."/ "mut." / "ser." / "var."/ "[var.]" / "subsp." / "subf." / "race" / "α" 
    / "β"/ "γ" / "δ" / "a." / "b." / "c." / "d." / "e." / "g." / "k.")
    {
      def apply(a)
        " " + text_value + " " + a.value
      end
      def canonical(a)
        " " + a.value
      end
      def details(a)
        {:subspecies => [{:type => text_value, :value => a.value}]}
      end
    }
  end
  
  rule species_name
    space a:cap_latin_word space b:latin_word space {
      def value
        a.value + " " + b.value 
      end
      def canonical
        value
      end
      
      def details
        {:genus => a.value, :species => b.value}
      end
    }
  end

  rule latin_word
    space [a-z\-ë]+ space {
      def value 
        text_value.strip
      end
    }
  end
  
  rule cap_latin_word
    space [A-Z] [a-z\-ë]+ space {
      def value
        text_value.strip
      end
      
      def canonical 
        text_value.strip
      end
      
      def details 
        {:name_type => "Uninomial", :uninomial => value}
      end
    }
  end
  
  rule space
    [ ]*
  end
end