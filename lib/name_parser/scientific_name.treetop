grammar ScientificName

  rule composite_scientific_name
    a:scientific_name hybrid_separator b:scientific_name {
      def value
        a.value + " x " + b.value
      end
      def canonical
        a.canonical + " x " + b.canonical
      end
      def details
        {:hybrid => {:scientific_name1 => a.details, :scientific_name2 => b.details}}
      end
    }
    /
    a:scientific_name space hybrid_separator space [\?]? {
      def value
        a.value + " x ?"
      end
      
      def canonical
        a.canonical + " x ?"
      end
      
      def details
        {:hybrid => {:scientific_name1 => a.details, :scientific_name2 => "?"}}
      end
    }
    /
    scientific_name
  end
  
  rule scientific_name
    space a:name_part space b:authors_part space c:status_part space {
      def value
        a.value + " " + b.value + " " + c.value
      end
      def canonical
        a.canonical
      end
      def details
        a.details.merge(b.details).merge(c.details)
      end
    }
    /
    space a:name_part space b:authors_part space {
      def value
        a.value + " " + b.value
      end
      def canonical
        a.canonical
      end
      def details
        a.details.merge(b.details)
      end
    }
    /
    name_part
  end
  
  rule status_part
    a:status_word space b:status_part {
      def value
        a.value + " " + b.value
      end
      def details
        {:status => value}
      end
    }
    /
    status_word
  end
  
  rule status_word
    latin_word [\.] {
      def value
        text_value.strip
      end
      def details
        {:status => value}
      end
    }
    /
    latin_word
  end
  
  rule authors_part
    a:simple_authors_part space "ex" space b:simple_authors_part {
      def value 
        a.value + " ex " + b.value
      end
      
      def details
        {:revised_name_authors => {:revised_authors => a.details[:authors], :authors => b.details[:authors]}}
      end
    }
    /
    a:original_authors_revised_name space b:authors_names_full {
      def value
        a.value + " " + b.value
      end
      def details
        a.details.merge(b.details)
      end
    }
    /
    authors_revised_name
    /
    original_authors_revised_name
    /
    simple_authors_part
  end
  
  rule simple_authors_part
    a:original_authors_groups space b:authors_names_full {
      def value
        a.value + " " + b.value
      end
      def details
        a.details.merge(b.details)
      end
    }
    /
    original_authors_names_full
    /
    authors_names_full
  end
  
  rule original_authors_groups 
    a:original_authors_names_full space b:original_authors_groups {
      def value
        a.value + " " + b.value
      end
      def details
        {:orig_authors => a.details[:orig_authors] + b.details[:orig_authors]}
      end
    }
    /
    original_authors_names_full
  end

  rule original_authors_names_full
    "(" space a:authors_names_full space ")" {
      def value
        "(" + a.value + ")"
      end
      def details
        {:orig_authors => [a.details[:authors]]}
      end
    }
  end
    
  rule original_authors_revised_name
    "(" space a:authors_revised_name space ")" {
      def value
        "(" + a.value + ")"
      end
      
      def details
        {:original_revised_name_authors => a.details[:revised_name_authors]}
      end
    }
  end
  
  rule authors_revised_name
    a:authors_names_full space "ex" space b:authors_names_full {
      def value
        a.value + " ex " + b.value
      end
      def details
        {:revised_name_authors =>{:revised_authors => a.details[:authors], :authors => b.details[:authors]}}
      end
    } 
  end

  rule authors_names_full
    a:authors_names space b:year {
      def value 
        a.value + " " + b.value
      end
      def details
        {:authors => {:names => a.details[:authors][:names]}.merge(b.details)}
      end
    }
    /
    authors_names
  end
      
  rule authors_names
    a:author_name space sep:author_name_separator space b:authors_names {
      def value
        sep.apply(a,b)
      end
      
      def details
        sep.details(a,b)
      end
    }
    /
    author_name
  end  
  
  rule author_name_separator
    ("&"/",") {
      def apply(a,b)
        a.value + " " + text_value + " " + b.value
      end

      def details(a,b)
        {:authors => {:names => a.details[:authors][:names] + b.details[:authors][:names]}}
      end
    }
  end
  
  rule author_name
    space a:author_word space b:author_name space {
      def value
        a.value + " " + b.value
      end

      def details
        {:authors => {:names => [value]}}
      end
    }
    /
    author_word
  end
  
  rule author_word
    ("anon."/"f."/"bis"/"arg."/"da"/"der"/"den"/"de"/"du"/"van"/"et al.\{\?\}"/"et al.") {
      def value
        text_value.strip
      end
      def details
        {:authors => {:names => [value]}}
      end
    }
    / 
    ("Å"/"Ö"/"Á"/"Ø"/"Ô"/"Š"/"Č"/"É"/"Ž"/[A-Z]) [^0-9()\s&,]+ {
      def value
        text_value.gsub(/\s+/, " ").strip
      end
      def details
        {:authors => {:names => [value]}}
      end
    }
  end
  
  rule name_part
    space a:species_name space b:subspecies_names {
      def value
        a.value + b.value
      end
      def canonical
        a.canonical + b.canonical
      end
      
      def details
        a.details.merge(b.details)
      end
    }
    /
    space a:species_name space b:latin_word {
      def value
        a.value + " " + b.value
      end
      
      def canonical
        value
      end
      
      def details
        a.details.merge({:subspecies => {:type => "n/a", :value =>b.value}})
      end
    }
    /
    species_name
    / 
    cap_latin_word
  end
  
  rule subspecies_names
    a:subspecies_name space b:subspecies_names {
      def value
        a.value + b.value
      end
      
      def canonical
        a.canonical + b.canonical
      end
      
      def details
        c = a.details[:subspecies] + b.details_subspecies
        a.details.merge({:subspecies => c})
      end
    }
    /
    subspecies_name
  end
  
  rule subspecies_name
    sel:selector space a:latin_word {
      def value 
        sel.apply(a)
      end
      def canonical
        sel.canonical(a)
      end
      def details
        sel.details(a)
      end
      def details_subspecies
        details[:subspecies]
      end
    }        
  end
  
  rule selector
    ("f.sp." / "f." / "ssp."/ "mut." / "ser." / "var."/"subvar."/ "[var.]" / "subsp." / "subf." / "race" / "α" 
    / "β"/ "γ" / "δ" / "ε" / "a." / "b." / "c." / "d." / "e." / "g." / "k.")
    {
      def apply(a)
        " " + text_value + " " + a.value
      end
      def canonical(a)
        " " + a.value
      end
      def details(a)
        {:subspecies => [{:type => text_value, :value => a.value}]}
      end
    }
  end
  
  rule species_name
    space a:cap_latin_word space b:subgenus space c:latin_word space {
      def value
        a.value + " " + b.value + " " + c.value
      end
      def canonical
        a.value + " " + c.value
      end
      def details
        {:genus => a.value, :subgenus => b.details, :species => c.value}
      end
    } 
    /
    space a:cap_latin_word space b:latin_word space {
      def value
        a.value + " " + b.value 
      end
      def canonical
        value
      end
      
      def details
        {:genus => a.value, :species => b.value}
      end
    }
  end
  
  rule subgenus
    "(" space a:cap_latin_word space ")" {
      def value
        "(" + a.value + ")"
      end
      def details
        a.value
      end
    }
  end

  rule latin_word
    space [a-z] [a-z\-ëüäö]+ space {
      def value 
        text_value.strip
      end
    }
  end
  
  rule cap_latin_word
    space [A-Z] [a-z] [a-z\-ëüäö]+ space {
      def value
        text_value.strip
      end
      
      def canonical 
        text_value.strip
      end
      
      def details 
        {:name_type => "Uninomial", :uninomial => value}
      end
    }
  end
  
  rule hybrid_separator
    ("x"/"X") {
      def value
        "x"
      end
    }
  end
  
  rule year
    [0-9\?]+ {
      def value
        text_value.strip
      end
      def details
        {:year => value}
      end
    }
  end
  
  rule space
    [ ]*
  end
end