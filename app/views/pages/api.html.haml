=title "API"

- content_for :content_splash do
  %h2 Application Programming Interface (Alpha -- subject to change)

%p Ruby examples require the rest-client gem. To install it use:

%pre.code
  :escaped
    gem install rest-client

%hr

%h3 Data Sources

%p You can resolve names against specific data sources or against the whole resolver database. To resolve against data sources you must supply their ids; this simple API allows you to find them.

%h4 Resource URI
- resource_url = Gni::Config.base_url + "/data_sources"

#base-url
  %p= resource_url + ".xml (XML output)"
  %p= resource_url + ".json (JSON output)"

%h4 Ruby Code Example

%pre.code
  :escaped
    #!/usr/bin/env ruby
    require 'rest-client'
    puts RestClient.get("#{resource_url}.json")

%hr
%h3 Resolve Names

%p 
  Receives a list of names and resolves each against the entire resolver database or against specific data sources. Underlying resolving and scoring algorithms are described
  = succeed '.' do
    %a{:href => '/about'} elsewhere

%h4 Resource URI
- resource_url = Gni::Config.base_url + "/name_resolvers"

#base-url
  %p= resource_url + ".xml (XML output)"
  %p= resource_url + ".json (JSON output)"
  
%h4 Parameters (GET or POST)
%dl
  %dt
    names (required)
  %dd
    Type: string, Default: none. List of names delimited by either pipe "|" or new line "\n". Use a pipe for GET requests, new line for POST requests. For POST requests you may optionally supply your local id for each name as:
    
    %pre.code
      :preserve
        123|Parus major
        125|Parus thruppi
        126|Parus carpi

    Names in the response will contain your supplied ids, facilitating integration. You can also upload files using a multipart POST request (see example below). Name strings must be listed as above.
  %dt
    resolve_once (optional)
  %dd
    Type: boolean (true/false), Default: 'false'. Find the first available match instead of matches across all data sources with all possible renderings of a name. When 'true', response is rapid but incomplete.
  %dt
    with_context (optional)
  %dd
    Type: boolean (true/false), Default: 'true'. Reduce the likelihood of matches to taxonomic homonyms. When 'true' a common taxonomic context is calculated for all supplied names from matches in data sources that have classification tree paths. Names out of determined context are penalized during score calculation.
%h4 Example

%pre.code
  :escaped
    #{resource_url}.xml?names=Plantago+major|Monohamus+galloprovincialis|Felis+concolor&data_source_ids=1|12
    #{resource_url}.json?names=Plantago+major|Monohamus+galloprovincialis|Felis+concolor
    #{resource_url}.json?names=Plantago+major|Monohamus+galloprovincialis|Felis+concolor@data_source_ids=1|12&resolve_once=false

%h4 Ruby Code Example

%pre.code
  :escaped
    #!/usr/bin/env ruby
    require 'rest-client'
    require 'uri'

    puts "GET request\n"
    puts RestClient.get(URI.escape("#{resource_url}.json?names=Plantago major|Monohamus galloprovincialis|Felis concolor&resolve_once=false&data_source_ids=1|3"))
    
    puts "\n\nPOST request with names and supplied IDs\n"
    puts RestClient.post(resource_url, :format => "json", :names =>"1|Plantago major\n2|Pardosa moesta L.\n3|Felis concolor", :resolve_once => false, :data_source_ids => "1")
    
    if File.exists?('names_list.txt')
        puts "\n\nPOST request with an uploaded file\n"
        puts RestClient.post(resource_url, :format => "json", :file =>File.new("names_list.txt", "r:utf-8"), :resolve_once => false, :data_source_ids => "1")
    end
