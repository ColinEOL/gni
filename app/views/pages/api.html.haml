=title "API"

- content_for :content_splash do
  %h2 Application Programming Interface (Alpha -- might change in the future)

%h5 Note:

%p Ruby examples require gem rest-client. To install it use

%pre.code
  :escaped
    gem install rest-client

%hr

%h3 Show Data Sources

%p You can resolve names against specific data sources or against the whole resolver database. For resolving against data sources you need to know their ids. This simple API allows you find them.

%h4 Resource URI
- resource_url = Gni::Config.base_url + "/data_sources"

#base-url
  %p= resource_url + ".xml (xml output)"
  %p= resource_url + ".json (json output)"
  
%h4 Example

%pre.code
  :escaped
    #{resource_url}.xml
    #{resource_url}.json

%h4 Ruby Code Example

%pre.code
  :escaped
    #!/usr/bin/env ruby
    require 'rest-client'
    puts RestClient.get("#{resource_url}.json")

%hr
%h3 Resolve Names

%p 
  Takes list of names and resolves them against the whole resolver database or specific data sources. Underlying resolving and scoring algorithms are described at 
  %a{:href => '/about'} About 
  page.

%h4 Resource URI
- resource_url = Gni::Config.base_url + "/name_resolvers"

#base-url
  %p= resource_url + ".xml (xml output)"
  %p= resource_url + ".json (json output)"
  
%h3 Parameters (GET or POST)
%dl
  %dt
    names (obligatory)
  %dd
    Type: string. Default: none. List of names delimited by either pipe character "|" or new line character "\n". Use pipe character for GET requests, new line for POST requests. Optionally for POST requests you can supply your local ID for each name using formatting like this:
    
    %pre.code
      :escaped
        123|Parus major
        125|Parus thruppi
        126|Parus carpi

    Your names will return back with the ID supplied by you, making it easier to process the results. You can also upload files using mulpipart POST request (see example below). Name strings has to be listed in the described above fasion.
  %dt
    resolve_once (optional)
  %dd
    Type: boolean (true/false). Default: 'false'. Tries to find canonical exact and fuzzy match even if exact string match was found. When true -- you get results faster, but they are not complete. Set this parameter to 'true' if you try to find if a name is real name, but you do not care to find it in all possible databases with all possible renderings of a name. To make wait longer and receive more complete data set it to 'false'.
  %dt
    with_context (optional)
  %dd
    Type: boolean (true/false). Default: 'true'. This parameter allows to weed out homonyms from the results. When this parameter is set to true a common context of the names is calculated for data sources with classification trees. All names for which classification path is found are used for calculating a context. Context of a name collection is a lowest clade which contains 90% of all resolved names. Names out of determined context get penalized significantly during score calculation.

%h4 Output Example

%pre.code
  :escaped
    {

      "id": "31FqejHuQYm980nCtUgvaw",
      "url": "http://resolver.globalnames.org/name_resolvers/31FqejHuQYm980nCtUgvaw.json",
      "data_sources": [ ],
      "context": [
        {
          "data_source_id": "1",
          "clade": Spermatophyta
        }
      ],
      "parameters": {
        "with_context": true,
        "data_sources": [ ],
        "resolve_once": true
      }
      "data": [
        {
          "supplied_name_string": "Plantago major",
          "supplied_id": "1",
          "results": [
            {
              "data_source_id": 4,
              "gni_uuid": "09880732-5417-5512-2952-230616235585",
              "name_string": "Plantago major",
              "canonical_form": "Plantago major",
              "classification_path": "|Eukaryota|Viridiplantae|Streptophyta|Streptophytina|Embryophyta|Tracheophyta|Euphyllophyta|Spermatophyta|Magnoliophyta|||||Lamiales|Plantaginaceae|Plantagineae|Plantago|Plantago major",
              "classification_path_ids": "131567|2759|33090|35493|131221|3193|58023|78536|58024|3398|71240|91827|71274|91888|4143|156152|216794|26867|29818",
              "taxon_id": "29818",
              "local_id": null,
              "match_type": 1,
              "prescore": "3|0|0",
              "score": 0.9882161311296586
            }
          ]
        }
      ],
      "status": "success",
      "message": "Success",
    }

%h4 Output Fields

%dt id
%dd Resolver request id. Your request is stored temporarily in the database and is assigned an id
%dt url
%dd Using the url you can access your results for 7 days since the request.
%dt data_sources
%dd A list of data source ids you used for name resolution. If no data sources were given the list is empty.
%dd context
%dt Appears if with_context parameter is set to true. It shows id of a data source which was used to create the context and the context itself -- a lowest clade which contains 90% of names found within the classification. If there were not enough names to collect the statistics the clade remains empty.
%dt data
%dd A container for the resolution data 
%dt supplied_name_string
%dd A name string supplied by you in your list
%dt supplied_id
%dd Returns id supplied by you with the name string
%dt results
%dd A container for diplaying found names for a particular name string
%dt data_source_id
%dd An id of a data source where a name was found
%dt gni_uuid
%dd An identifier for the found name string used in global names
%dt name_string
%dd The name string round in this data source
%dt canonical_form
%dd A "canonical" version of the name generated by GN name parser
%dt classification_path
%dd If a name string was found withing a data source classification this field will provide found classification path
%dt classification_path_ids
%dd Same classification path but shown with supplied taxon_ids (see below)
%dt taxon_id
%dd An identifier supplied in Darwin Core Archive for the name string record
%dt local_id
%dd Shows id local to the data source (if it was given by the data source manager)
%dt match_type
%dd 
  Explains how resolver found the name. If resolver cannot find any names which corresponding to the whole supplied name string it chops of the infraspecies information and tries to match the species part of the name. If species match fails it tries to match genus part of the name.
  %ul
    %li 1 - Exact match
    %li 2 - Exact match by canonical form of a name
    %li 3 - Fuzzy match by canonical form
    %li 4 - Partial exact match by species part of canonical form
    %li 5 - Partial fuzzy match by species part of canonical form
    %li 6 - Exact match by genus part of a canonical form
%dd prescore
%dt Points used to calculate the score delimited by '|' -- "Match points|Author match points|Context points". Negative points decrease the final result. 
%dt score
%dd 
  A confidence score calculated for the match. 0.5 means an uncertain result which needs to be checked manually. Result higher than 0.9 corresponds to 'good' matches. Results between 0.5 and 0.9 should be taken with caution. Results less than 0.5 are most probably wrong matches. The scoring is described in more details on the 
  %a{:href => "/about"}About
  page
%h4 Examples

%pre.code
  :escaped
    #{resource_url}.xml?names=Plantago+major|Monohamus+galloprovincialis|Felis+concolor&data_source_ids=1|12
    #{resource_url}.json?names=Plantago+major|Monohamus+galloprovincialis|Felis+concolor+species
    #{resource_url}.json?names=Plantago+major|Monohamus+galloprovincialis|Felis+concolor@data_source_ids=1|12&resolve_once=false

%h4 Ruby Code Example

%pre.code
  :escaped
    #!/usr/bin/env ruby
    require 'rest-client'
    require 'uri'

    puts "GET request\n"
    puts RestClient.get(URI.escape("#{resource_url}.json?names=Plantago major|Monohamus galloprovincialis|Felis concolor&resolve_once=false&data_source_ids=1|3"))
    
    puts "\n\nPOST request with names and supplied IDs\n"
    puts RestClient.post(resource_url, :format => "json", :names =>"1|Plantago major\n2|Pardosa moesta L.\n3|Felis concolor", :resolve_once => false, :data_source_ids => "1")
    
    if File.exists?('names_list.txt')
        puts "\n\nPOST request with an uploaded file\n"
        puts RestClient.post(resource_url, :format => "json", :file =>File.new("names_list.txt", "r:utf-8"), :resolve_once => false, :data_source_ids => "1")
    end
