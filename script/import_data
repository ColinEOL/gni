#!/usr/bin/env ruby
require "rubygems"
require "xml/parser"
require 'optparse'
require 'open-uri'


require "ruby-prof"


OPTIONS = {
  :environment => "development",
  :source_id => nil,
  :data => nil
}

ARGV.options do |opts|
  script_name = File.basename($0)
  opts.banner = "Usage: ruby #{script_name} [options]"

  opts.separator ""

  opts.on("-e", "--environment=name", String,
          "Specifies the environment to create the account under (test/development/production).",
          "Default: #{OPTIONS[:environment]}") { |OPTIONS[:environment]| }

  opts.separator ""

  opts.on("-d", "--data=url", String,
          "Specifies url which contains data") { |OPTIONS[:data_url]| }

  opts.separator ""

  opts.on("-s", "--source_id=gna_data_source_id", Integer,
          "Identifier of the data_source in GNA") { |OPTIONS[:source_id]| }

  opts.separator ""

  opts.on("-h", "--help",
          "Show this help message.") { puts opts; exit }

  opts.parse!
end

raise ArgumentError.new("Both data url and source id are required") unless OPTIONS[:data_url] && OPTIONS[:source_id]

ENV["RAILS_ENV"] = OPTIONS[:environment]
require File.dirname(__FILE__) + "/../config/environment" 

data_url = OPTIONS[:data_url]
data_source_id = OPTIONS[:source_id]

RubyProf.start
f = open(data_url)
c = ActiveRecord::Base.connection
p = XMLParser.new

def save_record(connection, record)
     record[:uri] ||= nil
     record[:identifier] ||= nil
     name_string_id = connection.execute("select id from name_strings where name = '#{record[:raw_name]}'").fetch_row[0].to_i rescue nil
     if ! name_string_id
       name_string_id = connection.insert("insert into name_strings (name) values ('#{record[:raw_name]}')") 
     end
     connection.insert("insert into imported_name_indices (data_source_id, name_string_id, uri) values (#{record[:data_source_id]}, #{name_string_id}, '#{record[:uri]}')") rescue puts "duplicate entry #{record[:raw_name]}"
end

record = record_template = {:data_source_id => data_source_id}
current_var = nil
c.execute("delete from imported_name_indices where data_source_id = #{record[:data_source_id]}")
p.parse(f) do |e,n,d|
  if e == XMLParser::START_ELEM
    if n == "dwc:ScientificName"
      current_var = :raw_name
    elsif n == "dc:source"
      current_var = :uri
    end
  elsif e == XMLParser::END_ELEM
    if n == "record"
      save_record(c, record)
      record = record_template
    end
  elsif e == XMLParser::CDATA
    if current_var
      record[current_var] = d.strip
      current_var = nil
    end
  end  
end
result = RubyProf.stop 



printer = RubyProf::FlatPrinter.new(result)
printer.print(STDOUT, 0)
