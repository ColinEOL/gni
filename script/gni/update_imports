#!/usr/bin/env python
import os
import os.path
import sys
import data_import as di

from optparse import OptionParser

PID_PATH =  os.path.normpath(os.path.dirname(__file__) + "/../../tmp/pids/update_imports.pid")
TIMEOUT = 3600

WAITING = 1
PROCESSING = 2
FAILED = 3
UPDATED = 4


def get_running(): #{{{1
    if os.path.exists(PID_PATH):
        return True
    return False

def set_running(make_running = True): #{{{1
    if make_running:
        f = open(PID_PATH, 'w')
        f.close()
    else:
        os.remove(PID_PATH)

class Updater: #{{{1
    def __init__(self, environment): #{{{2
        self.environment = environment
        self.db = di.DbImporter(environment)
    
    def get_data_source_id(self): #{{{2
        self.db.cursor.execute("select id, data_source_id from import_schedulers where status = %s order by created_at limit 1", WAITING)
        res =  self.db.cursor.fetchone()
        if res:
            self.import_scheduler_id = res[0]
            self.data_source_id = res[1]
            res = res[0]
        return res
    
    def get_data_url(self): #{{{2
        self.db.cursor.execute("select data_url from data_sources where id = %s", self.data_source_id)
        res = self.db.cursor.fetchone()
        if res:
            self.data_url = res[0]
            self._change_status(PROCESSING, "Getting data from %s." % self.data_url)
        else:
            self._change_status(FAILED, 'Could not not find data url')
        return res

    def process_updates(self): #{{{2
        while 1 == 1:
            if self.get_data_source_id():
                if self.get_data_url():
                    self._process_data()
            else:
                break

    def _process_data(self): #{{{2
        try:
            i = di.Importer(self.data_url, self.data_source_id, self.environment)
            self._change_status(PROCESSING, "Parsing XML from %s" % self.data_url)
            for ii in i.parse():
              self._change_status(PROCESSING, ii)
            self._change_status(PROCESSING, "Processing data.")
            i.get_deleted()
            i.get_inserted()
            i.get_changed()
            statistics = "No changes"
            if (i.deleted or i.inserted or i.changed):
                self._change_status(PROCESSING, "Deleting removed records.")
                i.db_delete()
                self._change_status(PROCESSING, "Inserting new records.")
                i.db_insert()
                self._change_status(PROCESSING, "Updating records.")
                i.db_update()
                statistics = i.db_store_statistics()
                self._change_status(PROCESSING, statistics)
            i.db_commit()
            self._change_status(UPDATED, "Successfull update: %s" % statistics)

        except Exception, e:
            self._change_status(FAILED, e.message)

        
    def _change_status(self, status, message): #{{{2
        print self.import_scheduler_id, status, message
        self.db.cursor.execute("update import_schedulers set status = %s, message = %s where id = %s", (status, message, self.import_scheduler_id))
        self.db.conn.commit() 
        
if __name__ == '__main__': #{{{1
    opts = OptionParser()

    opts.add_option("-e", "--environment", dest="environment", default="development",
                      help="Specifies the environment of the system (development|test|producton).")

    (options, args) = opts.parse_args()

    if not get_running():
        try:
            set_running(True)
            u = Updater(options.environment)
            u.process_updates() 
        except Exception, e:
            set_running(False)
            print 'reraising...'
            raise

        else:
          set_running(False)
