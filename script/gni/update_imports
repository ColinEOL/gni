#!/usr/bin/env python
import os
import os.path
import sys
import data_import as di

from optparse import OptionParser

PID_PATH = os.path.normpath(os.path.dirname(__file__) + "/../../tmp/pids/update_imports.pid")
FILES_PATH = os.path.normpath(os.path.dirname(__file__) + "/../../repositories/")

TIMEOUT = 3600

WAITING           = 1
PROCESSING        = 2
FAILED            = 3
UPDATED           = 4
UNCHANGED         = 5
DOWNLOADING       = 6
PREPROCESSING     = 7

def is_running(): #{{{1
    if os.path.exists(PID_PATH):
        return True
    return False

def set_running(make_running = True): #{{{1
    if make_running:
        f = open(PID_PATH, 'w')
        f.close()
    else:
        os.remove(PID_PATH)

class Updater: #{{{1
    def __init__(self, environment): #{{{2
        self.environment = environment
        self.db = di.DbImporter(environment)
    
    def get_data_source_id(self): #{{{2
        self.db.cursor.execute("select id, data_source_id from import_schedulers where status = %s order by created_at limit 1", PROCESSING)
        res =  self.db.cursor.fetchone()
        print res
        if res:
            self.import_scheduler_id = res[0]
            self.data_source_id = res[1]
            res = res[0]
        return res
    
    def get_data_file(self): #{{{2
        self.data_file = FILES_PATH + "/" + str(self.data_source_id) + "/" + str(self.data_source_id)
        if os.path.exists(self.data_file):
            self._change_status(PROCESSING, "Getting data from downloaded file.")
        else:
            self._change_status(FAILED, 'Could not not find data file %s' % self.data_file  )
            self.data_file = None
        return self.data_file

    def process_updates(self): #{{{2
        while 1 == 1:
            if self.get_data_source_id():
                if self.get_data_file():
                    self._process_data()
            else:
                break

    def _process_data(self): #{{{2
        try:
            self._change_status(PROCESSING, "Parsing XML from the downloaded file")
            for status in di.run_imports(self.data_file, self.data_source_id, self.environment):
                self._change_status(PROCESSING, status)
            
            self._change_status(UPDATED, "Successfull update")
            
        except Exception, e:
            self._change_status(FAILED, e.message)

        
    def _change_status(self, status, message): #{{{2
        print self.import_scheduler_id, status, message
        self.db.cursor.execute("update import_schedulers set status = %s, message = %s where id = %s", (status, message, self.import_scheduler_id))
        self.db.conn.commit() 
        
if __name__ == '__main__': #{{{1
    opts = OptionParser()

    opts.add_option("-e", "--environment", dest="environment", default="development",
                      help="Specifies the environment of the system (development|test|producton).")

    (options, args) = opts.parse_args()

    if not is_running():
        try:
            set_running(True)
            u = Updater(options.environment)
            u.process_updates() 
        except Exception, e:
            set_running(False)
            print 'reraising...'
            raise

        else:
          set_running(False)
    else:
        print 'importer is running already, aborting...'
